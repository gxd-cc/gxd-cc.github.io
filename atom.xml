<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gxd-cc.github.io</id>
    <title>gxd-cc</title>
    <updated>2020-05-24T06:02:03.787Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gxd-cc.github.io"/>
    <link rel="self" href="https://gxd-cc.github.io/atom.xml"/>
    <subtitle>桃李春风一杯酒，江湖夜雨十年灯</subtitle>
    <logo>https://gxd-cc.github.io/images/avatar.png</logo>
    <icon>https://gxd-cc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, gxd-cc</rights>
    <entry>
        <title type="html"><![CDATA[Java中的桥方法]]></title>
        <id>https://gxd-cc.github.io/post/java-zhong-de-qiao-fang-fa/</id>
        <link href="https://gxd-cc.github.io/post/java-zhong-de-qiao-fang-fa/">
        </link>
        <updated>2020-05-24T05:54:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="java中的桥方法">Java中的桥方法</h3>
<hr>
<p>在说桥方法之前先来简单说一下泛型擦除。在Java中，泛型在运行时是不可见的，下面是一个简单的泛型类<code>Parent</code>：</p>
<pre><code class="language-java">public class Parent&lt;T&gt; { 
    public void doSomeThing(T param) {        // do some thing    }
}
</code></pre>
<p>在这个类被加载到Java虚拟机后，泛型<code>T</code>被擦除替换为<code>Object</code>：</p>
<pre><code class="language-java">public class Parent { 
    public void doSomeThing(Object param) {        // do some thing    }
}
</code></pre>
<p>假如说<code>Parent</code>类存在一个子类<code>Sub</code>：</p>
<pre><code class="language-java">public class Sub extends Parent&lt;String&gt; {    
    public void doSomeThing(String param) {        // do some thing    }
}
</code></pre>
<p>可以看到，因为泛型的缘故，子类在重写<code>doSomeThing</code>方法时，可以直接将参数替换为参数类型<code>String</code>。那么有意思的事情就来了，我们可以看到在父类中有一个方法<code>doSomeThing(Object param)</code>，子类中对应的重写方法为<code>doSomeThing(String param)</code>，仔细想一想子类中是不是还应该存在一个继承自父类的<code>doSomeThing(Object param)</code>方法？</p>
<pre><code class="language-java">public class Sub extends Parent&lt;String&gt; {    
    public void doSomeThing(String param) {        // do some thing    }
    
    public void doSomeThing(Object param) {        // do some thing    }
}
</code></pre>
<p>显然在子类中这是两个方法（方法的参数类型不同），那么考虑下面的调用：</p>
<pre><code class="language-java">Parent&lt;String&gt; obj = new Sub();
obj.doSomeThing(&quot;test&quot;);
</code></pre>
<p>变量<code>obj</code>的声明类型是<code>Parent&lt;String&gt;</code>，并且在这个类型中只有一个方法<code>doSomeThing(Object param)</code>。虚拟机用<code>obj</code>这个引用调用这个方法时发现<code>obj</code>的实际类型是<code>Sub</code>，所以就回去调用<code>Sub</code>中的<code>doSomeThing(Object param)</code>，这个方法实际上就会作为桥方法，它的内部调用其实类似于：</p>
<pre><code class="language-java">public void doSomeThing(Object param) {       
    doSomeThing((String) param)
}
</code></pre>
<p>为了验证这个想法，我们使用<code>javap</code>命令来调用<code>Sub.class</code>，结果如下：<br>
<img src="https://gxd-cc.github.io/post-images/1590299817639.png" alt="" loading="lazy"><br>
可以看到在<code>Sub</code>类中确实存在两个不同参的<code>doSomeThing</code>方法，并且调用流程也确实如上所说。</p>
<p>那么，桥方法是专为了泛型提供服务的吗？我们知道在重写方法时可以缩小返回类型的范围（返回一个子类），那么当我们重写<code>Object</code>类中的<code>clone()</code>方法，并且将返回值类型设置为其它类型，在编译后会怎么样呢？</p>
<pre><code class="language-java">public class Sub extends Parent&lt;String&gt; {    
    public void doSomeThing(String param) {        // do some thing    }
    
    public void doSomeThing(Object param) {        // do some thing    }
    
    protected Sub clone() throws CloneNotSupportedException {  
        return null;
    }
}
</code></pre>
<p>这个时候也会生成对应的桥方法，也就是说<code>Sub</code>类在编译后会类似于下面的形式：</p>
<pre><code class="language-java">public class Sub extends Parent&lt;String&gt; {    
    // some methods
    
    protected Sub clone() throws CloneNotSupportedException {  
       // ...
    }
   
   protected Object  clone() throws CloneNotSupportedException {  
       // ...
    }
}
</code></pre>
<p>这个时候需要了解一个概念，在<code>Java</code>语法中会以方法签名（名称、参数）来判断方法是否重复，而在<code>Java</code>虚拟机中会将方法的返回类型也纳入判断范围，所以上面的代码在直接编写程序的时候会出现编译错误，但是<code>JVM</code>中是允许同名同参，不同返回类型的方法存在的。这两个方法也被说成“具有协变的返回类型”。<br>
<img src="https://gxd-cc.github.io/post-images/1590299826571.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python学习（二）：安装配置VS Code]]></title>
        <id>https://gxd-cc.github.io/post/python-xue-xi-er-an-zhuang-pei-zhi-vs-code/</id>
        <link href="https://gxd-cc.github.io/post/python-xue-xi-er-an-zhuang-pei-zhi-vs-code/">
        </link>
        <updated>2020-04-20T16:37:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="软件下载与安装">软件下载与安装</h3>
<p>首先在<a href="https://code.visualstudio.com/">官网</a>下载<code>visualstudio code</code>。下载完毕后打开安装程序，按照提示进行安装（推荐在第二步的时候勾选“添加到PATH”选项）。<br>
<img src="https://gxd-cc.github.io/post-images/1587400896841.png" alt="" loading="lazy"></p>
<h3 id="软件配置">软件配置</h3>
<h4 id="下载python插件">下载python插件</h4>
<p><code>VS Code</code>安装成功后打开软件，在左边操作列点击<code>Extensions</code>图标，然后搜索<code>python</code>，安装搜索结果中第一个选项。<br>
<img src="https://gxd-cc.github.io/post-images/1587401078379.png" alt="" loading="lazy"><br>
安装结束后，点击<code>Reload Required</code>按钮，加载插件。</p>
<h4 id="选择python解释器">选择python解释器</h4>
<p>在<code>VS Code</code>页面按住<code>Ctrl + Shift + P</code>打开命令面板，输入<code>Select Interpreter</code>并敲击回车，在出现的选项中选择对应的python解释器（图片中出现了两个解释器，一个是我自己安装的，另外一个是<code>VS Code</code>中携带的）。<br>
<img src="https://gxd-cc.github.io/post-images/1587401683166.png" alt="" loading="lazy"></p>
<h4 id="第一个python程序">第一个python程序</h4>
<p>点击操作列的第一个图标，回到<code>Explorer</code>，然后创建一个新的文件<code>hello.py</code>。<br>
<img src="https://gxd-cc.github.io/post-images/1587401934500.png" alt="" loading="lazy"><br>
然后打开<code>hello.py</code>文件输入一个最简单的语句<code>print('hello world')</code>用于在控制台输出<code>hello world</code>字符串，编写完毕后保存文件（快捷键<code>Ctrl + S</code>）。<br>
接下来就是运行该<code>python</code>程序了：<br>
（1）首先可以再文件中点击鼠标右键，点击<code>Run Python File in Terminal</code>，即在终端运行<code>python</code>文件<br>
<img src="https://gxd-cc.github.io/post-images/1587402465576.png" alt="" loading="lazy"><br>
（2）使用Ctrl + `快捷键打开<code>Terminal</code>，然后输入<code>python hello.py</code>指令运行该程序<br>
<img src="https://gxd-cc.github.io/post-images/1587402639765.png" alt="" loading="lazy"><br>
（3）点击页面左侧的<code>Run</code>图标，然后点击<code>Run and Debug</code>按钮，再弹出的输入框中搜索<code>Python File</code>，然后敲击回车，运行该程序<br>
<img src="https://gxd-cc.github.io/post-images/1587402769511.png" alt="" loading="lazy"><br>
在运行过程中，如果<code>VS Code</code>右下角弹出弹窗要求安装插件，直接点击<code>install</code>即可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python学习（一）：安装Python]]></title>
        <id>https://gxd-cc.github.io/post/python-xue-xi-yi-an-zhuang-python/</id>
        <link href="https://gxd-cc.github.io/post/python-xue-xi-yi-an-zhuang-python/">
        </link>
        <updated>2020-04-19T13:04:30.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>首先从<a href="https://www.python.org/">官网</a>获取Python安装包。</li>
<li>打开下载好的安装包，首先勾选界面下面的<code>Add Python 3.8 to PATH</code>，然后选择<code>Customize installtion</code>（自定义安装位置）。<br>
<img src="https://gxd-cc.github.io/post-images/1587301971157.png" alt="" loading="lazy"></li>
<li>在新页面中直接点击<code>Next</code>即可。</li>
<li>在<code>Advanced Options</code>页面中选择自定义安装位置，然后点击<code>Install</code>。</li>
<li>等待安装结束后，界面出现<code>Setup was successful</code>则表示安装成功，此时点击<code>Close</code>按钮关闭安装程序，然后打开命令行界面，输入<code>python</code>，查看到下图的界面即表示Python环境变量配置成功。<br>
<img src="https://gxd-cc.github.io/post-images/1587302370952.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
</feed>